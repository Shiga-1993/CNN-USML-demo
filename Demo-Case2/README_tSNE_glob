README - tSNE Processing Script (tSNE_glob.sh)

Overview:
  This script automates t-SNE analysis on feature vectors extracted from neural network models (DenseNet/ResNet).
  It constructs a comma-separated list of output filenames for different datasets and network configurations,
  then calls the Python script "tSNE_glob.py" with the generated parameters.

Dependencies:
  - PyTorch module (loaded via "module load pytorch")
  - Python 3
  - Input data should be in the directory containing the unzipped files from the Zenodo repository 
    "Case3-DenseNet161-Data.zip". (For the demo, only 10 images per data type are included due to data size constraints.)
  - Output results will be stored in "DR_DATA/tSNE" (this directory is created if it does not exist)

Usage:
  1. Adjust the NN type by editing the NNtype variable (default: DenseNet).
  2. Modify the network numbers in the loop as needed (currently, only network 161 is active).
  3. Change the parameter "pp" if necessary (default: 80).
  4. Ensure that the input directory is set to the one containing the unzipped files from "Case3-DenseNet161-Data.zip".
  5. Make the script executable:
         chmod +x tSNE_glob.sh
  6. Run the script:
         ./tSNE_glob.sh

How It Works:
  - The script iterates over selected network numbers (e.g., 161) and a parameter "pp" (e.g., 80).
  - It loops through a list of datasets:
        BB_2d25um_binary, BSG_2d25um_binary, BUG_2d25um_binary,
        BanderaBrown_2d25um_binary, BanderaGray_2d25um_binary,
        Bentheimer_2d25um_binary, Berea_2d25um_binary, CastleGate_2d25um_binary,
        Kirby_2d25um_binary, Leopard_2d25um_binary, Parker_2d25um_binary
    and appends the suffix "_png" to each dataset.
  - For each dataset, it constructs a filename using the pattern:
         DenseNet161_<Dataset>_png.out
  - The filenames are concatenated into a comma-separated keyword string.
  - The script then calls:
         python3 tSNE_glob.py yes 2 <pp> <input_dir> <output_dir> "<keyword>"
    to perform t-SNE analysis on the selected feature vectors.
  - Finally, it echoes the constructed keyword string for verification.

Customization:
  Modify network numbers, the dataset list, or Python script parameters as needed to suit your analysis requirements.

