#!/usr/bin/env python3
"""
tSNE Visualization Script

This script reads tSNE result files from the DR_DATA/tSNE/ directory that start with "DenseNet161_",
and visualizes the data in a 2D scatter plot. The files are assumed to have the following format:
  
  index  tSNE_dim1  tSNE_dim2

The legend is generated by extracting the keyword following "DenseNet161_" up to ".out" in each filename,
and then taking only the first token (before the first underscore) as the legend label.
Font sizes for axis labels, tick labels, and legends are set to larger values.
"""

import glob
import os
import numpy as np
import matplotlib.pyplot as plt

# Set font sizes for plot elements
plt.rcParams.update({
    'font.size': 14,
    'axes.titlesize': 18,
    'axes.labelsize': 16,
    'legend.fontsize': 14,
    'legend.title_fontsize': 16,
    'xtick.labelsize': 14,
    'ytick.labelsize': 14
})

# Define the file pattern for tSNE result files (e.g., DenseNet161_Parker_2d25um_binary_png.out_tsne_pp10_results.txt)
file_pattern = "DR_DATA/tSNE/DenseNet161_*_results.txt"
files = glob.glob(file_pattern)

if not files:
    print("No files found matching:", file_pattern)
    exit(1)

plt.figure(figsize=(10, 8))

# Iterate over each file and plot the corresponding data
for f in files:
    base = os.path.basename(f)
    # Extract full label from filename: text after "DenseNet161_" and before ".out"
    if base.startswith("DenseNet161_"):
        label_full = base[len("DenseNet161_"):].split(".out")[0]
        # Use only the first token (before the first underscore) as the legend label
        label = label_full.split('_')[0]
    else:
        label = base

    try:
        data = np.loadtxt(f)
        # Ensure the data has at least three columns (index, tSNE_dim1, tSNE_dim2)
        if data.ndim == 1:
            data = data.reshape(1, -1)
        if data.shape[1] < 3:
            print(f"File {f} does not have enough columns to plot.")
            continue
        # Use column 2 for x and column 3 for y (0-indexed: columns 1 and 2)
        x = data[:, 1]
        y = data[:, 2]
        plt.scatter(x, y, label=label, alpha=0.7, edgecolors='none')
    except Exception as e:
        print(f"Error reading file {f}: {e}")

plt.xlabel("Component 1")
plt.ylabel("Component 2")
# Set the aspect ratio to 1:1
plt.gca().set_aspect('equal', adjustable='box')
# Place the legend outside the plot area (upper left, outside the main plot)
plt.legend(title=None, bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
# Adjust layout to leave space for the legend on the right
plt.tight_layout(rect=[0, 0, 0.8, 1])
plt.savefig("tSNE_visualization.png", dpi=300, bbox_inches='tight')

